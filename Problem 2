import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

# Define starting conditions for each population, starting with 3 populations and only population 1 has infection

N1 = 100
S1 = 99
I1 = N1 - S1
R1 = 0

N2 = 100
S2 = 100
I2 = N2 - S2
R2 = 0


value_matrix = np.array([S1, I1, R1, S2, I2, R2])

interaction_matrix = np.array([[1, 0.6], [0.01, 1]])

days = 10
dt = 0.1
steps = round(days / dt)

# Define values for beta and gamma
beta = 1.6
gamma = 0.4

# Define differential equations
def SIR_equations(y, t, beta, gamma, interaction_matrix):
    value_matrix = np.array(y.reshape(2,3))
    N_vector = value_matrix @ np.array([[1], [1], [1]])
    beta_N = beta / N_vector
    first_matrix = np.identity(2) * beta_N
    infecteds = np.array([value_matrix[:,1]]).T
    susceptebles = np.array([value_matrix[:,0]]).T  
    
    lapda = first_matrix @ (interaction_matrix @ infecteds)

    dS = - lapda * susceptebles   
    dI = lapda * susceptebles - gamma * infecteds
    dR = gamma * infecteds

    
    changes = np.array([dS.T[0], dI.T[0], dR.T[0]]).T
    final_values = changes.reshape(1,6)

    return final_values[0]


# Time vector, for the plot
t = np.linspace(0,days,steps)

start_parameters = value_matrix

# Find solution
final = odeint(SIR_equations, start_parameters, t, args=(beta, gamma, interaction_matrix))

S1, I1, R1, S2, I2, R2 = final.T

# Plot the distribution
plt.title('For β= '+str(beta)+' and γ = '+str(gamma))
plt.plot(t, I1, label='Infected P1')
plt.plot(t, I2, label='Infected P2')
plt.plot(t, S1, label='S P1')
plt.plot(t, S2, label='S P2')
plt.plot(t, R1, label='R P1')
plt.plot(t, R2, label='R P2')
plt.ylim(0, 100)
plt.xlim(0, days)
plt.ylabel('Fraction of people')
plt.xlabel('Amount of days')
plt.legend()
plt.show()
